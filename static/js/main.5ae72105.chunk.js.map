{"version":3,"sources":["serviceWorker.js","Components/ImageView/ImageView.jsx","Components/ImageModal/ImageModal.jsx","Components/ImageSlider/ImageSlider.jsx","Components/Main/Main.jsx","index.js"],"names":["Boolean","window","location","hostname","match","ImageView","props","source","url","caption","id","loading","src","process","alt","className","onClick","openModal","ImageModal","nextSlide","n","modal","document","getElementById","style","display","getElementsByClassName","onclick","onClose","this","children","Component","ImageSlider","showSlides","state","activeIndex","images","length","setState","viewModal","Array","isArray","map","img","index","key","Main","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5ae72105.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport \"./ImageView.scss\";\n\nconst ImageView = (props) => {\n\n    const { source } = props\n    const { url, caption, id } = source || {}\n\n    if (!url) return null\n    return (\n        <>\n            <img loading=\"lazy\" src={`${process.env.PUBLIC_URL}/assets/images/${url}`} alt=\"\" className=\"img\" id={`img${id}`}\n                onClick={props.openModal}\n            />\n            <div className=\"img-caption\">{caption}</div>\n\n\n        </>\n    )\n}\n\nexport default ImageView","import React, { Component } from 'react'\nimport \"./ImageModal.scss\"\n\nclass ImageModal extends Component {\n\n    componentDidMount() {\n\n        const modal = document.getElementById(\"img-modal\");\n        modal.style.display = \"block\";\n\n        // Get the <span> element that closes the modal\n        const closeIcon = document.getElementsByClassName(\"modal-close\")[0];\n\n        // When the user clicks on <span> (x), close the modal\n        closeIcon.onclick = () => {\n            modal.style.display = \"none\";\n            this.props.onClose()\n        }\n    }\n\n    nextSlide = (n) => {\n        this.props.nextSlide(n)\n    }\n\n    render() {\n        const { source, children } = this.props\n        const { url, caption } = source || {}\n        return (\n            <div id=\"img-modal\" className=\"modal\">\n                <span className=\"modal-close\">&times;</span>\n                <img loading=\"lazy\" className=\"modal-content\" id=\"img01\" src={`${process.env.PUBLIC_URL}/assets/images/${url}`} alt=\"\" />\n                {children}\n                <div className=\"modal-caption\">{caption}</div>\n\n                <div className=\"arrow-container\">\n                    <div className=\"prev\" onClick={() => this.nextSlide(-1)}>&#10094;</div>\n                    <div className=\"next\" onClick={() => this.nextSlide(1)}>&#10095;</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ImageModal\n","import React, { Component, Fragment } from 'react'\nimport \"./ImageSlider.scss\";\nimport ImageView from '../ImageView/ImageView'\nimport ImageModal from '../ImageModal/ImageModal';\n\nclass ImageSlider extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            viewModal: false,\n            activeIndex: 0\n        }\n    }\n\n    nextSlide = (n) => {\n        this.showSlides(this.state.activeIndex + n);\n    }\n\n    showSlides = (n) => {\n        const { images } = this.props\n        let activeIndex = n;\n        if (n >= images.length) { activeIndex = 0 }\n        if (n < 0) { activeIndex = images.length - 1 }\n        this.setState({ activeIndex })\n    }\n\n    componentDidMount() {\n        this.showSlides(this.state.activeIndex);\n    }\n\n    render() {\n        const { viewModal, activeIndex } = this.state\n        const { images } = this.props\n        return (\n            <Fragment>\n\n                {\n                    viewModal &&\n                    <ImageModal\n                        source={images[activeIndex]}\n                        onClose={() => { this.setState({ viewModal: false }) }}\n                        nextSlide={this.nextSlide}\n                    >\n                    </ImageModal>\n                }\n\n                <div className=\"slideshow-container\">\n                    {\n                        Array.isArray(images) && images.map((img, index) =>\n                            <div className=\"my-slides fade\"\n                                style={activeIndex === index ? { display: \"block\" } : { display: \"none\" }}\n                                key={img.id}>\n                                <ImageView source={img} openModal={() => { this.setState({ viewModal: true }) }} />\n                            </div>\n                        )\n                    }\n\n                    <div className=\"arrow-container\">\n                        <div className=\"prev\" onClick={() => this.nextSlide(-1)}>&#10094;</div>\n                        <div className=\"next\" onClick={() => this.nextSlide(+1)}>&#10095;</div>\n                    </div>\n                </div>\n                <br />\n\n                <div className=\"dot-container\">\n                    {\n                        Array.isArray(images) && images.map((img, index) =>\n                            <span key={img.id} className={`${activeIndex === index ? \"active\" : \"\"} dot`} onClick={() => this.showSlides(index)}></span>\n                        )\n                    }\n                </div>\n\n            </Fragment>\n        )\n    }\n}\n\nexport default ImageSlider\n","import React, { Component } from 'react'\nimport \"./Main.scss\";\nimport ImageSlider from '../ImageSlider/ImageSlider';\n\nclass Main extends Component {\n    state = {\n        images: [\n            {\n                url: \"img_nature_wide.jpg\",\n                id: \"1\",\n                caption: \"Caption\",\n            },\n            {\n                url: \"img_snow_wide.jpg\",\n                id: \"2\",\n                caption: \"Caption\",\n            },\n            {\n                url: \"img_mountains_wide.jpg\",\n                id: \"3\",\n                caption: \"Caption\",\n            },\n            {\n                url: \"dp.png\",\n                id: \"4\",\n                caption: \"Caption\",\n            },\n            {\n                url: \"2.png\",\n                id: \"5\",\n                caption: \"Caption\",\n            },\n            {\n                url: \"3.png\",\n                id: \"6\",\n                caption: \"Caption\",\n            }\n        ]\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"header\">\n\n                </div>\n                <div className=\"container\">\n                    <ImageSlider images={this.state.images} />\n\n                </div>\n            </>\n        )\n    }\n}\n\nexport default Main\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport Main from './Components/Main/Main';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}