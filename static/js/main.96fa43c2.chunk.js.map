{"version":3,"sources":["serviceWorker.js","Components/ImageView/ImageView.jsx","Components/ImageModal/ImageModal.jsx","Components/ImageSlider/ImageSlider.jsx","Components/ImageUploader/ImageUploader.jsx","Components/Main/Main.jsx","index.js"],"names":["Boolean","window","location","hostname","match","ImageView","props","source","url","caption","id","customImage","loading","src","process","alt","className","onClick","openModal","ImageModal","nextSlide","n","modal","document","getElementById","style","display","getElementsByClassName","onclick","onClose","this","children","hideNavigation","Component","ImageSlider","showSlides","state","activeIndex","images","length","setState","viewModal","bindChangeIndex","Array","isArray","map","img","index","key","ImageUploader","onUploadImage","imageUrl","addToImages","clearImage","manageUploadedFile","file","getBinaryFromFileInput","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","onSelectImage","e","target","files","fileType","includes","then","binary","catch","reason","console","log","value","alert","htmlFor","accept","type","autoComplete","requires","onChange","Main","func","chaneIndex","changeIndex","addImage","newImage","newImageObject","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.96fa43c2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport \"./ImageView.scss\";\n\nconst ImageView = (props) => {\n\n    const { source } = props\n    const { url, caption, id, customImage } = source || {}\n\n    if (!url) return null\n    return (\n        <>\n            <img loading=\"lazy\" src={customImage ? url : `${process.env.PUBLIC_URL}/assets/images/${url}`} alt=\"\" className=\"img\" id={`img${id}`}\n                onClick={props.openModal}\n            />\n            <div className=\"img-caption\">{caption}</div>\n        </>\n    )\n}\n\nexport default ImageView","import React, { Component } from 'react'\nimport \"./ImageModal.scss\"\n\nclass ImageModal extends Component {\n\n    componentDidMount() {\n\n        const modal = document.getElementById(\"img-modal\");\n        modal.style.display = \"block\";\n\n        // Get the <span> element that closes the modal\n        const closeIcon = document.getElementsByClassName(\"modal-close\")[0];\n\n        // When the user clicks on <span> (x), close the modal\n        closeIcon.onclick = () => {\n            modal.style.display = \"none\";\n            this.props.onClose()\n        }\n    }\n\n    nextSlide = (n) => {\n        this.props.nextSlide(n)\n    }\n\n    render() {\n        const { source, children, hideNavigation } = this.props\n        const { url, caption, customImage } = source || {}\n        return (\n            <div id=\"img-modal\" className=\"modal\">\n                <span className=\"modal-close\">&times;</span>\n                <img loading=\"lazy\" className=\"modal-content\" id=\"img01\" src={customImage ? url : `${process.env.PUBLIC_URL}/assets/images/${url}`} alt=\"\" />\n                {children}\n                \n                {\n                    !!caption &&  <div className=\"modal-caption\">{caption}</div>\n                }\n               \n                {\n                    !hideNavigation &&\n                    <div className=\"arrow-container\">\n                        <div className=\"prev\" onClick={() => this.nextSlide(-1)}>&#10094;</div>\n                        <div className=\"next\" onClick={() => this.nextSlide(1)}>&#10095;</div>\n                    </div>\n                }\n\n            </div>\n        )\n    }\n}\n\nexport default ImageModal\n","import React, { Component, Fragment } from 'react'\nimport \"./ImageSlider.scss\";\nimport ImageView from '../ImageView/ImageView'\nimport ImageModal from '../ImageModal/ImageModal';\n\nclass ImageSlider extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            viewModal: false,\n            activeIndex: 0\n        }\n        this.props.bindChangeIndex(this.showSlides)\n    }\n\n    nextSlide = (n) => {\n        this.showSlides(this.state.activeIndex + n);\n    }\n\n    showSlides = (n) => {\n        const { images } = this.props\n        let activeIndex = n;\n        if (n >= images.length) { activeIndex = 0 }\n        if (n < 0) { activeIndex = images.length - 1 }\n        this.setState({ activeIndex })\n    }\n\n    componentDidMount() {\n        this.showSlides(this.state.activeIndex);\n    }\n\n    render() {\n        const { viewModal, activeIndex } = this.state\n        const { images } = this.props\n        return (\n            <Fragment>\n\n                {\n                    viewModal &&\n                    <ImageModal\n                        source={images[activeIndex]}\n                        onClose={() => { this.setState({ viewModal: false }) }}\n                        nextSlide={this.nextSlide}\n                    >\n                    </ImageModal>\n                }\n\n                <div className=\"slideshow-container\">\n                    {\n                        Array.isArray(images) && images.map((img, index) =>\n                            <div className=\"my-slides fade\"\n                                style={activeIndex === index ? { display: \"block\" } : { display: \"none\" }}\n                                key={img.id}>\n                                <ImageView source={img} openModal={() => { this.setState({ viewModal: true }) }} />\n                            </div>\n                        )\n                    }\n\n                    <div className=\"arrow-container\">\n                        <div className=\"prev\" onClick={() => this.nextSlide(-1)}>&#10094;</div>\n                        <div className=\"next\" onClick={() => this.nextSlide(+1)}>&#10095;</div>\n                    </div>\n                </div>\n                <br />\n\n                <div className=\"dot-container\">\n                    {\n                        Array.isArray(images) && images.map((img, index) =>\n                            <span key={img.id} className={`${activeIndex === index ? \"active\" : \"\"} dot`} onClick={() => this.showSlides(index)}></span>\n                        )\n                    }\n                </div>\n\n            </Fragment>\n        )\n    }\n}\n\nexport default ImageSlider\n","import React, { Component } from 'react'\nimport \"./ImageUploader.scss\"\nimport ImageModal from '../ImageModal/ImageModal'\n\nclass ImageUploader extends Component {\n    state = {\n\n    }\n    onUploadImage = () => {\n        const { imageUrl } = this.state\n        this.props.addToImages(imageUrl)\n        this.setState({\n            openModal: false,\n            imageUrl: \"\"\n        }, this.clearImage)\n    }\n\n    manageUploadedFile = (file) => {\n        this.setState({\n            openModal: true,\n            imageUrl: file\n        })\n    }\n\n    getBinaryFromFileInput = (file) => {\n        return new Promise(function (resolve, reject) {\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = function () { resolve(reader.result); };\n            reader.onerror = reject;\n        });\n    }\n\n    onSelectImage = (e) => {\n        const [file] = e.target.files\n\n        const fileType = file['type'];\n        const validImageTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n        if (validImageTypes.includes(fileType)) {\n            this.getBinaryFromFileInput(file)\n                .then((binary) => {\n                    this.manageUploadedFile(binary);\n                }).catch((reason) => {\n                    console.log(`Error during upload ${reason}`);\n                    e.target.value = '';\n                });\n        } else {\n            e.target.value = '';\n            alert(\"Only Image is Allowed\")\n        }\n    }\n\n    clearImage = () => {\n        document.getElementById(\"image-input\").value = \"\"\n    }\n\n    render() {\n        const { openModal, imageUrl } = this.state\n        return (\n            <>\n                {\n                    openModal &&\n                    <ImageModal\n                        source={{\n                            url: imageUrl,\n                            customImage: true\n                        }}\n                        onClose={() => { this.setState({ openModal: false, imageUrl: \"\" }, this.clearImage) }}\n                        hideNavigation\n                    >\n                        <div className=\"upload-button-container\">\n                            <button onClick={this.onUploadImage} className=\"upload-button\">Upload</button>\n                        </div>\n                    </ImageModal>\n                }\n                <div className=\"uploader-container\">\n                    <p className=\"uploader-heading\">Have an Image? Add to Carousel now!</p>\n\n                    <div className=\"uploader\">\n                        <label htmlFor=\"image-input\">\n                            <div className=\"border\">\n                                <div className=\"text-section\">\n                                    <p>Click to upload your Image</p>\n                                    <p>Accepted formats .jpg, .jpeg, .png</p>\n                                </div>\n                            </div>\n                        </label>\n                        <input accept=\".jpg,.jpeg,.png\"\n                            type=\"file\"\n                            autoComplete=\"off\"\n                            id=\"image-input\"\n                            requires=\"true\"\n                            onChange={this.onSelectImage}\n                            style={{ display: `none` }}>\n                        </input>\n                    </div>\n\n                </div>\n            </>\n        )\n    }\n}\n\nexport default ImageUploader\n","import React, { Component } from 'react'\nimport \"./Main.scss\";\nimport ImageSlider from '../ImageSlider/ImageSlider';\nimport ImageUploader from '../ImageUploader/ImageUploader';\n\nclass Main extends Component {\n    state = {\n        images: [\n            {\n                url: \"img_nature_wide.jpg\",\n                id: \"1\",\n                caption: \"Caption\",\n            },\n            {\n                url: \"img_snow_wide.jpg\",\n                id: \"2\",\n                caption: \"Caption\",\n            },\n            {\n                url: \"img_mountains_wide.jpg\",\n                id: \"3\",\n                caption: \"Caption\",\n            },\n        ]\n    }\n\n    bindChangeIndex = (func) => {\n        this.chaneIndex = func\n    }\n\n    changeIndex = () => {\n        const { images } = this.state\n        this.chaneIndex(images.length - 1)\n    }\n\n    addImage = (newImage, caption) => {\n\n        const { images } = this.state\n\n        const newImageObject = {\n            url: newImage,\n            id: images[images.length - 1].id + 1,\n            caption: \"\",\n            customImage: true\n        }\n\n        this.setState({\n            images: [...images, newImageObject]\n        }, this.changeIndex)\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"header\">\n                    <p className=\"header-title\">Image Carousel</p>\n                </div>\n                <div className=\"container\">\n                    <ImageSlider images={this.state.images} bindChangeIndex={this.bindChangeIndex} />\n                    <ImageUploader addToImages={this.addImage} />\n                </div>\n            </>\n        )\n    }\n}\n\nexport default Main\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport Main from './Components/Main/Main';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}